<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>Listing Locator</title>
    <meta
      name="viewport"
      content="initial-scale=1,maximum-scale=1,user-scalable=no"
    />
    <script src="https://api.tiles.mapbox.com/mapbox-gl-js/v2.2.0/mapbox-gl.js"></script>
    <link
      href="https://api.tiles.mapbox.com/mapbox-gl-js/v2.2.0/mapbox-gl.css"
      rel="stylesheet"
    /> 
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js" type="text/javascript"></script>
    <%= content_tag :div, class: "listings", data: {listings: @listing_json, longitude: @longitude, latitude: @latitude} do %><% end %>
    <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.0/mapbox-gl-geocoder.min.js"></script>
    <link rel="stylesheet" href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.0/mapbox-gl-geocoder.css" type="text/css">
    <!-- Turf.js plugin -->
    <script src='https://npmcdn.com/@turf/turf/turf.min.js'></script>

    <style>
      body {
        color: #404040;
        font: 400 15px/22px 'Source Sans Pro', 'Helvetica Neue', Sans-serif;
        margin: 0;
        padding: 0;
        -webkit-font-smoothing: antialiased;
      }

      * {
        -webkit-box-sizing: border-box;
        -moz-box-sizing: border-box;
        box-sizing: border-box;
      }

      .sidebar {
        position: absolute;
        width: 33.3333%;
        height: 100%;
        top: 0;
        left: 0;
        overflow: hidden;
        border-right: 1px solid rgba(0, 0, 0, 0.25);
      }

      .map {
        position: absolute;
        left: 33.3333%;
        width: 66.6666%;
        top: 50px;
        bottom: 0px;
      }

      h1 {
        font-size: 28px;
        margin: 0;
        font-weight: 400;
        line-height: 20px;
        padding: 65px 2px;
      }

      a {
        color: #404040;
        text-decoration: none;
      }

      a:hover {
        color: #101010;
      }

      .heading {
        background: #fff;
        border-bottom: 1px solid #eee;
        height: 100px;
        width: 500px;
        line-height: 40px;
        padding: 10 10px;
        background-color: #00853e;
        color: #fff;
      }

      .listings {
        position : fixed;
        height: 100%;
        width: 33.33%;
        overflow: auto;
        padding-bottom: 20px; 
      }

      .listings .item {
        display: block;
        border-bottom: 1px solid #eee;
        padding: 10px;
        text-decoration: none;
        text-align: left;
      }

      .listings .item:last-child {
        border-bottom: none;
        margin-bottom: 80px;
      }
      .listings .item .title {
        display: block;
        color: #00853e;
        font-weight: 700;
      }

      .listings .item .title small {
        font-weight: 400;
      }
      .listings .item.active .title,
      .listings .item .title:hover {
        color: #8cc63f;
      }
      .listings .item.active {
        background-color: #f8f8f8;
      }
      ::-webkit-scrollbar {
        width: 3px;
        height: 3px;
        border-left: 0;
        background: rgba(0, 0, 0, 0.1);
      }
      ::-webkit-scrollbar-track {
        background: none;
      }
      ::-webkit-scrollbar-thumb {
        background: #00853e;
        border-radius: 0;
      }

      .marker {
        border: none;
        cursor: pointer;
        height: 56px;
        width: 56px;
        background-image: url(https://cdn0.iconfinder.com/data/icons/small-n-flat/24/678111-map-marker-512.png);
        background-size: contain;
        background-repeat: no-repeat;
        background-color: rgba(0, 0, 0, 0);
      }

      .clearfix {
        display: block;
      }
      .clearfix:after {
        content: '.';
        display: block;
        height: 0;
        clear: both;
        visibility: hidden;
      }

      /* Marker tweaks */
      .mapboxgl-popup {
        padding-bottom: 50px;
      }

      .mapboxgl-popup-close-button {
        display: none;
      }
      .mapboxgl-popup-content {
        font: 400 15px/22px 'Source Sans Pro', 'Helvetica Neue', Sans-serif;
        padding: 0;
        width: 180px;
      }
      .mapboxgl-popup-content-wrapper {
        padding: 1%;
      }
      .mapboxgl-popup-content h3 {
        background: #91c949;
        color: #fff;
        margin: 0;
        display: block;
        padding: 10px;
        border-radius: 3px 3px 0 0;
        font-weight: 700;
        margin-top: -15px;
      }

      .mapboxgl-popup-content h4 {
        margin: 0;
        display: block;
        padding: 10px 10px 10px 10px;
        font-weight: 400;
      }

      .mapboxgl-popup-content div {
        padding: 10px;
      }

      .mapboxgl-container .leaflet-marker-icon {
        cursor: pointer;
      }

      .mapboxgl-popup-anchor-top > .mapboxgl-popup-content {
        margin-top: 15px;
      }

      .mapboxgl-popup-anchor-top > .mapboxgl-popup-tip {
        border-bottom-color: #91c949;
      }
        .mapboxgl-ctrl-geocoder {
        border: 0;
        border-radius: 0;
        position: relative;
        top: 0;
        width: 800px;
        margin-top: 0;
        }

        .mapboxgl-ctrl-geocoder > div {
        min-width: 100%;
        margin-left: 0;
        }

      .button {
          background-color: #4CAF50; /* Green */
          border: none;
          color: black;
          padding: 10px 32px;
          text-align: center;
          text-decoration: none;
          display: inline-block;
          font-size: 16px;
          cursor: pointer;
          border-radius: 25px;
        }
        .button:hover {background-color: #3e8e41}
        .button:active {
            transform: scale(0.98);
            /* Scaling button to 0.98 to its original size */
            box-shadow: 3px 2px 22px 1px rgba(0, 0, 0, 0.24);
            /* Lowering the shadow */
        }

    </style>
  </head>
  <body>
    <div class="sidebar">
      <div class="heading">
        <h1>Listings</h1>
      </div>
      <div id="listings" class="listings"></div>
    </div>
    <div id="map" class="map"></div>
    <script>
      /* This will let you use the .remove() function later on */
      if (!('remove' in Element.prototype)) {
        Element.prototype.remove = function () {
          if (this.parentNode) {
            this.parentNode.removeChild(this);
          }
        };
      }

      mapboxgl.accessToken = 'pk.eyJ1IjoiZmVkZTEwIiwiYSI6ImNrbXFuOHZoNjA5YWYycnBrbnlva3BreXQifQ.dfsLU-Ej4EZipT-BCrp7IQ';

      /**
       * Add the map to the page
       */
    var longitude = $('.listings').data('longitude');
    var latitude = $('.listings').data('latitude');
      var map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/streets-v11',
        center: [longitude ,latitude],
        zoom: 13,
      });
        
        var listings = $('.listings').data('listings');

      /**
       * Assign a unique id to each store. You'll use this `id`
       * later to associate each point on the map with a listing
       * in the sidebar.
       */
      listings.features.forEach(function (store, i) {
        store.properties.id = i;
      });
    var geocoder = new MapboxGeocoder({
        accessToken: mapboxgl.accessToken,
        mapboxgl: mapboxgl,
        flyTo: {
            zoom: 12 // If you want your result not to go further than a specific zoom
          },
        placeholder: 'Search for address or city', // Placeholder text for the search bar
        //bbox: [-122.30937, 37.84214, -122.23715, 37.89838], // Boundary for Berkeley
        proximity: {
        longitude: longitude,
        latitude: latitude
        },
        });
    map.addControl(geocoder);

      /**
       * Wait until the map loads to make changes to the map.
       */
      map.on('load', function (e) {
        /**
         * This is where your '.addLayer()' used to be, instead
         * add only the source without styling a layer
         */
        map.addSource('places', {
          'type': 'geojson',
          'data': listings
        });

        /**
         * Add all the things to the page:
         * - The location listings on the side of the page
         * - The markers onto the map
         */
        var options = { units: 'miles' };
        listings.features.forEach(function(listing) {
            Object.defineProperty(listing.properties, 'distance', {
            value: turf.distance([longitude, latitude], listing.geometry, options),
            writable: true,
            enumerable: true,
            configurable: true
            });
        });
        listings.features.sort(function(a, b) {
          if (a.properties.distance > b.properties.distance) {
            return 1;
          }
          if (a.properties.distance < b.properties.distance) {
            return -1;
          }
          return 0; // a must be equal to b
        });
        
        buildLocationList(listings);
        addMarkers();
      });

    geocoder.on('result', function(ev) {
        var searchResult = ev.result.geometry;
        var options = { units: 'miles' };
        listings.features.forEach(function(listing) {
            Object.defineProperty(listing.properties, 'distance', {
            value: turf.distance(searchResult, listing.geometry, options),
            writable: true,
            enumerable: true,
            configurable: true
            });
        });
        listings.features.sort(function(a, b) {
          if (a.properties.distance > b.properties.distance) {
            return 1;
          }
          if (a.properties.distance < b.properties.distance) {
            return -1;
          }
          return 0; // a must be equal to b
        });
        var listings_list = document.getElementById('listings');
        while (listings_list.firstChild) {
          listings_list.removeChild(listings_list.firstChild);
        }
        buildLocationList(listings);
        //flyToStore(listings.features[0]);
        createPopUp(listings.features[0]);
 
    });
      
      /**
       * Add a marker to the map for every store listing.
       **/
      function addMarkers() {
        /* For each feature in the GeoJSON object above: */
        listings.features.forEach(function (marker) {
          /* Create a div element for the marker. */
          var el = document.createElement('div');
          /* Assign a unique `id` to the marker. */
          el.id = 'marker-' + marker.properties.id;
          /* Assign the `marker` class to each marker for styling. */
          el.className = 'marker';

          /**
           * Create a marker using the div element
           * defined above and add it to the map.
           **/
          new mapboxgl.Marker(el, { offset: [0, -23] })
            .setLngLat(marker.geometry.coordinates)
            .addTo(map);

          /**
           * Listen to the element and when it is clicked, do three things:
           * 1. Fly to the point
           * 2. Close all other popups and display popup for clicked store
           * 3. Highlight listing in sidebar (and remove highlight for all other listings)
           **/
          el.addEventListener('click', function (e) {
            /* Fly to the point */
            flyToStore(marker);
            /* Close all other popups and display popup for clicked store */
            createPopUp(marker);
            /* Highlight listing in sidebar */
            var activeItem = document.getElementsByClassName('active');
            var activeButton = document.getElementsByClassName('button');
            e.stopPropagation();
            if (activeItem[0]) {
              activeItem[0].style.textAlign = 'left';
              activeItem[0].classList.remove('active');
              activeButton[0].style.display = 'none';
              activeButton[0].classList.remove('button');
            }
            var listing = document.getElementById(
              'listing-' + marker.properties.id
            );
            listing.classList.add('active');
            listing.lastChild.classList.add('button');
            listing.lastChild.style.display = 'inline-block';
            listing.style.textAlign = 'center'; 
            listing.scrollIntoView({  behavior: 'smooth', block: 'center', inline: 'center' });
          });
        });
      }

      /**
       * Add a listing for each store to the sidebar.
       **/
      function buildLocationList(data) {
        data.features.forEach(function (store, i) {
          /**
           * Create a shortcut for `store.properties`,
           * which will be used several times below.
           **/
          var prop = store.properties;

          /* Add a new listing section to the sidebar. */
          var listings = document.getElementById('listings');
          var listing = listings.appendChild(document.createElement('div'));
          /* Assign a unique `id` to the listing. */
          listing.id = 'listing-' + prop.id;
          /* Assign the `item` class to each listing for styling. */
          listing.className = 'item';

          /* Add the link to the individual listing created above. */
          var link = listing.appendChild(document.createElement('a'));
          link.href = '#';
          link.className = 'title';
          link.id = 'link-' + prop.id;
          link.innerHTML = '<font size="4">' +  prop.address;

          /* Add details to the individual listing. */
          var details = listing.appendChild(document.createElement('div'));
            details.innerHTML = '<font size="3"><strong> Box/week: $' + prop.price.toFixed(2);
            details.innerHTML += '<br/>' +prop.name;
          details.innerHTML += ' &middot; City: ' + prop.city;
          if (prop.phone) {
            details.innerHTML += ' &middot; Phone: ' + prop.phone;
            details.innerHTML += '<br />Space: ' + prop.space + ' boxes';
            details.innerHTML += ' &middot; Duration: ' + prop.duration + ' weeks';
          }

          /* Add button for renting listing */
            var buttonElem = document.createElement('div');
            /* Assign a unique `id` to the button. */
            buttonElem.id = 'button';
            /* Assign the `marker` class to each button for styling. */
            buttonElem.href = '/listing/' + prop.listing_id;
            buttonElem.innerHTML = 'Request Space';
            buttonElem.className = 'button';
            buttonElem.style.display = 'none';

            buttonElem.onclick = function() { // remove list item here
                window.location = buttonElem.href;
            };
            listing.appendChild(buttonElem);
            buttonElem.classList.remove('button');

          /**
           * Listen to the element and when it is clicked, do four things:
           * 1. Update the `currentFeature` to the store associated with the clicked link
           * 2. Fly to the point
           * 3. Close all other popups and display popup for clicked store
           * 4. Highlight listing in sidebar (and remove highlight for all other listings)
           **/
        if (prop.distance) {
          var roundedDistance = Math.round(prop.distance * 10) / 10;
          details.innerHTML += '<br /><strong>' + roundedDistance + ' miles away</strong>';
        }
          link.addEventListener('click', function (e) {
            for (var i = 0; i < data.features.length; i++) {
              if (this.id === 'link-' + data.features[i].properties.id) {
                var clickedListing = data.features[i];
                var num = i;
                flyToStore(clickedListing);
                createPopUp(clickedListing);
              }
            }
            // add delete button
            var activeItem = document.getElementsByClassName('active');
            var activeButton = document.getElementsByClassName('button');
            if (activeItem[0]) {
              activeItem[0].style.textAlign = 'left';
              activeItem[0].classList.remove('active');
              activeButton[0].style.display = 'none'; 
              activeButton[0].classList.remove('button');
            }
            this.parentNode.classList.add('active');
            this.parentNode.lastChild.classList.add('button');
            this.parentNode.lastChild.style.display = 'inline-block';
            this.parentNode.style.textAlign = 'center'; 
          });
        });
      }

      /**
       * Use Mapbox GL JS's `flyTo` to move the camera smoothly
       * a given center point.
       **/
      function flyToStore(currentFeature) {
        map.flyTo({
          center: currentFeature.geometry.coordinates,
          zoom: 14
        });
      }

      /**
       * Create a Mapbox GL JS `Popup`.
       **/
      function createPopUp(currentFeature) {
        var popUps = document.getElementsByClassName('mapboxgl-popup');
        if (popUps[0]) popUps[0].remove();
        var popup = new mapboxgl.Popup({ closeOnClick: false })
          .setLngLat(currentFeature.geometry.coordinates)
          .setHTML(
            '<h3>Airstorage</h3>' +
              '<h4>' +
              currentFeature.properties.address +
              '</h4>'
          )
          .addTo(map);
      }
    </script>
  </body>
</html>
